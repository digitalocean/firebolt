package kafkaconsumer

import (
	"testing"

	"github.com/digitalocean/firebolt/util"

	"github.com/stretchr/testify/assert"

	metrics2 "github.com/digitalocean/firebolt/metrics"
)

func TestParseStats(t *testing.T) {
	jsonStr := "{ \"name\": \"rdkafka#consumer-5\", \"type\": \"consumer\", \"ts\":1534357925444843, \"time\":1534357925, \"replyq\":0, \"msg_cnt\":0, \"msg_size\":0, \"msg_max\":0, \"msg_size_max\":0, \"simple_cnt\":0, \"metadata_cache_cnt\":1, \"brokers\":{ \"localhost:9092/bootstrap\": { \"name\":\"localhost:9092/bootstrap\", \"nodeid\":-1, \"state\":\"UP\", \"stateage\":4999562, \"outbuf_cnt\":0, \"outbuf_msg_cnt\":0, \"waitresp_cnt\":0, \"waitresp_msg_cnt\":0, \"tx\":4, \"txbytes\":126, \"txerrs\":0, \"txretries\":0, \"req_timeouts\":0, \"rx\":4, \"rxbytes\":383, \"rxerrs\":0, \"rxcorriderrs\":0, \"rxpartial\":0, \"zbuf_grow\":0, \"buf_grow\":0, \"wakeups\":11, \"int_latency\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":0 }, \"rtt\": { \"min\":706, \"max\":1696, \"avg\":1038, \"sum\":4154, \"cnt\":4 }, \"throttle\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":0 }, \"toppars\":{ } } , \"kafka:9092/1001\": { \"name\":\"kafka:9092/1001\", \"nodeid\":1001, \"state\":\"UP\", \"stateage\":4996697, \"outbuf_cnt\":1, \"outbuf_msg_cnt\":0, \"waitresp_cnt\":1, \"waitresp_msg_cnt\":0, \"tx\":63, \"txbytes\":5241, \"txerrs\":0, \"txretries\":0, \"req_timeouts\":0, \"rx\":62, \"rxbytes\":12289, \"rxerrs\":0, \"rxcorriderrs\":0, \"rxpartial\":0, \"zbuf_grow\":0, \"buf_grow\":0, \"wakeups\":143, \"int_latency\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":0 }, \"rtt\": { \"min\":508, \"max\":104847, \"avg\":82416, \"sum\":5109823, \"cnt\":62 }, \"throttle\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":49 }, \"toppars\":{ \"firebolt-inttest-out-0\": { \"topic\":\"firebolt-inttest-out\", \"partition\":0} } } }, \"topics\":{ \"firebolt-inttest-out\": { \"topic\":\"firebolt-inttest-out\", \"metadata_age\":4992, \"partitions\":{ \"0\": { \"partition\":0, \"leader\":1001, \"desired\":true, \"unknown\":false, \"msgq_cnt\":0, \"msgq_bytes\":0, \"xmit_msgq_cnt\":0, \"xmit_msgq_bytes\":0, \"fetchq_cnt\":0, \"fetchq_size\":0, \"fetch_state\":\"active\", \"query_offset\":0, \"next_offset\":2323, \"app_offset\":2323, \"stored_offset\":2323, \"committed_offset\":-1001, \"committed_offset\":-1001, \"eof_offset\":2323, \"lo_offset\":-1001, \"hi_offset\":2323, \"consumer_lag\":0, \"consumer_lag_stored\":0, \"txmsgs\":0, \"txbytes\":0, \"msgs\": 90, \"rx_ver_drops\": 0 } , \"-1\": { \"partition\":-1, \"leader\":-1, \"desired\":false, \"unknown\":false, \"msgq_cnt\":0, \"msgq_bytes\":0, \"xmit_msgq_cnt\":0, \"xmit_msgq_bytes\":0, \"fetchq_cnt\":0, \"fetchq_size\":0, \"fetch_state\":\"none\", \"query_offset\":0, \"next_offset\":0, \"app_offset\":-1001, \"stored_offset\":-1001, \"committed_offset\":-1001, \"committed_offset\":-1001, \"eof_offset\":-1001, \"lo_offset\":-1001, \"hi_offset\":-1001, \"consumer_lag\":-1, \"consumer_lag_stored\":-1, \"txmsgs\":0, \"txbytes\":0, \"msgs\": 0, \"rx_ver_drops\": 0 } } } } , \"cgrp\": { \"rebalance_age\": 4991, \"rebalance_cnt\": 2, \"assignment_size\": 1 }}"

	metrics := &Metrics{}
	partitionStats := metrics.extractPartitionStats(jsonStr, "firebolt-inttest-out")
	assert.NotNil(t, partitionStats)

	assert.Equal(t, 1, len(partitionStats))
	assert.Equal(t, float64(0), partitionStats[0].id)
	assert.Equal(t, float64(-1001), partitionStats[0].lowWatermark)
	assert.Equal(t, float64(2323), partitionStats[0].highWatermark)
	assert.Equal(t, float64(2323), partitionStats[0].storedOffset)
	assert.Equal(t, float64(0), partitionStats[0].consumerLag)
	assert.Equal(t, float64(0), partitionStats[0].consumerLagStored)
}

func TestParseErrors(t *testing.T) {
	metrics := &Metrics{}

	// invalid json
	jsonStr := "not-even-json-at-all"
	partitionStats := metrics.extractPartitionStats(jsonStr, "firebolt-inttest-out")
	assert.Nil(t, partitionStats)

	// topics block is missing
	jsonStr = "{ \"name\": \"rdkafka#consumer-5\", \"type\": \"consumer\", \"ts\":1534357925444843, \"time\":1534357925, \"replyq\":0, \"msg_cnt\":0, \"msg_size\":0, \"msg_max\":0, \"msg_size_max\":0, \"simple_cnt\":0, \"metadata_cache_cnt\":1, \"cgrp\": { \"rebalance_age\": 4991, \"rebalance_cnt\": 2, \"assignment_size\": 1 }}"
	partitionStats = metrics.extractPartitionStats(jsonStr, "firebolt-inttest-out")
	assert.Nil(t, partitionStats)

	// topic name block is missing
	jsonStr = "{ \"name\": \"rdkafka#consumer-5\", \"type\": \"consumer\", \"ts\":1534357925444843, \"time\":1534357925, \"replyq\":0, \"msg_cnt\":0, \"msg_size\":0, \"msg_max\":0, \"msg_size_max\":0, \"simple_cnt\":0, \"metadata_cache_cnt\":1, \"topics\":{ },  \"cgrp\": { \"rebalance_age\": 4991, \"rebalance_cnt\": 2, \"assignment_size\": 1 }}"
	partitionStats = metrics.extractPartitionStats(jsonStr, "firebolt-inttest-out")
	assert.Nil(t, partitionStats)

	// partitions block is missing
	jsonStr = "{ \"name\": \"rdkafka#consumer-5\", \"type\": \"consumer\", \"ts\":1534357925444843, \"time\":1534357925, \"replyq\":0, \"msg_cnt\":0, \"msg_size\":0, \"msg_max\":0, \"msg_size_max\":0, \"simple_cnt\":0, \"metadata_cache_cnt\":1, \"topics\":{ \"firebolt-inttest-out\": { \"topic\":\"firebolt-inttest-out\", \"metadata_age\":4992 } },  \"cgrp\": { \"rebalance_age\": 4991, \"rebalance_cnt\": 2, \"assignment_size\": 1 }}"
	partitionStats = metrics.extractPartitionStats(jsonStr, "firebolt-inttest-out")
	assert.Nil(t, partitionStats)

	// partitions block is a simple val
	jsonStr = "{ \"name\": \"rdkafka#consumer-5\", \"type\": \"consumer\", \"ts\":1534357925444843, \"time\":1534357925, \"replyq\":0, \"msg_cnt\":0, \"msg_size\":0, \"msg_max\":0, \"msg_size_max\":0, \"simple_cnt\":0, \"metadata_cache_cnt\":1, \"topics\":{ \"firebolt-inttest-out\": { \"topic\":\"firebolt-inttest-out\", \"metadata_age\":4992, \"partitions\":\"not-valid-partitions\" } },  \"cgrp\": { \"rebalance_age\": 4991, \"rebalance_cnt\": 2, \"assignment_size\": 1 }}"
	partitionStats = metrics.extractPartitionStats(jsonStr, "firebolt-inttest-out")
	assert.Nil(t, partitionStats)

	// from here down, the header fields have been parsed successfully, and we're looking at the individual partition blocks
	// missing stats field: stored_offset
	jsonStr = "{ \"name\": \"rdkafka#consumer-5\", \"type\": \"consumer\", \"ts\":1534357925444843, \"time\":1534357925, \"replyq\":0, \"msg_cnt\":0, \"msg_size\":0, \"msg_max\":0, \"msg_size_max\":0, \"simple_cnt\":0, \"metadata_cache_cnt\":1, \"brokers\":{ \"localhost:9092/bootstrap\": { \"name\":\"localhost:9092/bootstrap\", \"nodeid\":-1, \"state\":\"UP\", \"stateage\":4999562, \"outbuf_cnt\":0, \"outbuf_msg_cnt\":0, \"waitresp_cnt\":0, \"waitresp_msg_cnt\":0, \"tx\":4, \"txbytes\":126, \"txerrs\":0, \"txretries\":0, \"req_timeouts\":0, \"rx\":4, \"rxbytes\":383, \"rxerrs\":0, \"rxcorriderrs\":0, \"rxpartial\":0, \"zbuf_grow\":0, \"buf_grow\":0, \"wakeups\":11, \"int_latency\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":0 }, \"rtt\": { \"min\":706, \"max\":1696, \"avg\":1038, \"sum\":4154, \"cnt\":4 }, \"throttle\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":0 }, \"toppars\":{ } } , \"kafka:9092/1001\": { \"name\":\"kafka:9092/1001\", \"nodeid\":1001, \"state\":\"UP\", \"stateage\":4996697, \"outbuf_cnt\":1, \"outbuf_msg_cnt\":0, \"waitresp_cnt\":1, \"waitresp_msg_cnt\":0, \"tx\":63, \"txbytes\":5241, \"txerrs\":0, \"txretries\":0, \"req_timeouts\":0, \"rx\":62, \"rxbytes\":12289, \"rxerrs\":0, \"rxcorriderrs\":0, \"rxpartial\":0, \"zbuf_grow\":0, \"buf_grow\":0, \"wakeups\":143, \"int_latency\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":0 }, \"rtt\": { \"min\":508, \"max\":104847, \"avg\":82416, \"sum\":5109823, \"cnt\":62 }, \"throttle\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":49 }, \"toppars\":{ \"firebolt-inttest-out-0\": { \"topic\":\"firebolt-inttest-out\", \"partition\":0} } } }, \"topics\":{ \"firebolt-inttest-out\": { \"topic\":\"firebolt-inttest-out\", \"metadata_age\":4992, \"partitions\":{ \"0\": { \"partition\":0, \"leader\":1001, \"desired\":true, \"unknown\":false, \"msgq_cnt\":0, \"msgq_bytes\":0, \"xmit_msgq_cnt\":0, \"xmit_msgq_bytes\":0, \"fetchq_cnt\":0, \"fetchq_size\":0, \"fetch_state\":\"active\", \"query_offset\":0, \"next_offset\":2323, \"app_offset\":2323, \"committed_offset\":-1001, \"committed_offset\":-1001, \"eof_offset\":2323, \"lo_offset\":-1001, \"hi_offset\":2323, \"consumer_lag\":0, \"consumer_lag_stored\":0, \"txmsgs\":0, \"txbytes\":0, \"msgs\": 90, \"rx_ver_drops\": 0 } , \"-1\": { \"partition\":-1, \"leader\":-1, \"desired\":false, \"unknown\":false, \"msgq_cnt\":0, \"msgq_bytes\":0, \"xmit_msgq_cnt\":0, \"xmit_msgq_bytes\":0, \"fetchq_cnt\":0, \"fetchq_size\":0, \"fetch_state\":\"none\", \"query_offset\":0, \"next_offset\":0, \"app_offset\":-1001, \"stored_offset\":-1001, \"committed_offset\":-1001, \"committed_offset\":-1001, \"eof_offset\":-1001, \"lo_offset\":-1001, \"hi_offset\":-1001, \"consumer_lag\":-1, \"consumer_lag_stored\":-1, \"txmsgs\":0, \"txbytes\":0, \"msgs\": 0, \"rx_ver_drops\": 0 } } } } , \"cgrp\": { \"rebalance_age\": 4991, \"rebalance_cnt\": 2, \"assignment_size\": 1 }}"
	partitionStats = metrics.extractPartitionStats(jsonStr, "firebolt-inttest-out")
	assert.NotNil(t, partitionStats)
	assert.Equal(t, 0, len(partitionStats))

	// missing stats field: lo_offset
	jsonStr = "{ \"name\": \"rdkafka#consumer-5\", \"type\": \"consumer\", \"ts\":1534357925444843, \"time\":1534357925, \"replyq\":0, \"msg_cnt\":0, \"msg_size\":0, \"msg_max\":0, \"msg_size_max\":0, \"simple_cnt\":0, \"metadata_cache_cnt\":1, \"brokers\":{ \"localhost:9092/bootstrap\": { \"name\":\"localhost:9092/bootstrap\", \"nodeid\":-1, \"state\":\"UP\", \"stateage\":4999562, \"outbuf_cnt\":0, \"outbuf_msg_cnt\":0, \"waitresp_cnt\":0, \"waitresp_msg_cnt\":0, \"tx\":4, \"txbytes\":126, \"txerrs\":0, \"txretries\":0, \"req_timeouts\":0, \"rx\":4, \"rxbytes\":383, \"rxerrs\":0, \"rxcorriderrs\":0, \"rxpartial\":0, \"zbuf_grow\":0, \"buf_grow\":0, \"wakeups\":11, \"int_latency\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":0 }, \"rtt\": { \"min\":706, \"max\":1696, \"avg\":1038, \"sum\":4154, \"cnt\":4 }, \"throttle\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":0 }, \"toppars\":{ } } , \"kafka:9092/1001\": { \"name\":\"kafka:9092/1001\", \"nodeid\":1001, \"state\":\"UP\", \"stateage\":4996697, \"outbuf_cnt\":1, \"outbuf_msg_cnt\":0, \"waitresp_cnt\":1, \"waitresp_msg_cnt\":0, \"tx\":63, \"txbytes\":5241, \"txerrs\":0, \"txretries\":0, \"req_timeouts\":0, \"rx\":62, \"rxbytes\":12289, \"rxerrs\":0, \"rxcorriderrs\":0, \"rxpartial\":0, \"zbuf_grow\":0, \"buf_grow\":0, \"wakeups\":143, \"int_latency\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":0 }, \"rtt\": { \"min\":508, \"max\":104847, \"avg\":82416, \"sum\":5109823, \"cnt\":62 }, \"throttle\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":49 }, \"toppars\":{ \"firebolt-inttest-out-0\": { \"topic\":\"firebolt-inttest-out\", \"partition\":0} } } }, \"topics\":{ \"firebolt-inttest-out\": { \"topic\":\"firebolt-inttest-out\", \"metadata_age\":4992, \"partitions\":{ \"0\": { \"partition\":0, \"leader\":1001, \"desired\":true, \"unknown\":false, \"msgq_cnt\":0, \"msgq_bytes\":0, \"xmit_msgq_cnt\":0, \"xmit_msgq_bytes\":0, \"fetchq_cnt\":0, \"fetchq_size\":0, \"fetch_state\":\"active\", \"query_offset\":0, \"next_offset\":2323, \"app_offset\":2323, \"stored_offset\":2323, \"committed_offset\":-1001, \"committed_offset\":-1001, \"eof_offset\":2323, \"hi_offset\":2323, \"consumer_lag\":0, \"consumer_lag_stored\":0, \"txmsgs\":0, \"txbytes\":0, \"msgs\": 90, \"rx_ver_drops\": 0 } , \"-1\": { \"partition\":-1, \"leader\":-1, \"desired\":false, \"unknown\":false, \"msgq_cnt\":0, \"msgq_bytes\":0, \"xmit_msgq_cnt\":0, \"xmit_msgq_bytes\":0, \"fetchq_cnt\":0, \"fetchq_size\":0, \"fetch_state\":\"none\", \"query_offset\":0, \"next_offset\":0, \"app_offset\":-1001, \"stored_offset\":-1001, \"committed_offset\":-1001, \"committed_offset\":-1001, \"eof_offset\":-1001, \"lo_offset\":-1001, \"hi_offset\":-1001, \"consumer_lag\":-1, \"consumer_lag_stored\":-1, \"txmsgs\":0, \"txbytes\":0, \"msgs\": 0, \"rx_ver_drops\": 0 } } } } , \"cgrp\": { \"rebalance_age\": 4991, \"rebalance_cnt\": 2, \"assignment_size\": 1 }}"
	partitionStats = metrics.extractPartitionStats(jsonStr, "firebolt-inttest-out")
	assert.NotNil(t, partitionStats)
	assert.Equal(t, 0, len(partitionStats))

	// missing stats field: hi_offset
	jsonStr = "{ \"name\": \"rdkafka#consumer-5\", \"type\": \"consumer\", \"ts\":1534357925444843, \"time\":1534357925, \"replyq\":0, \"msg_cnt\":0, \"msg_size\":0, \"msg_max\":0, \"msg_size_max\":0, \"simple_cnt\":0, \"metadata_cache_cnt\":1, \"brokers\":{ \"localhost:9092/bootstrap\": { \"name\":\"localhost:9092/bootstrap\", \"nodeid\":-1, \"state\":\"UP\", \"stateage\":4999562, \"outbuf_cnt\":0, \"outbuf_msg_cnt\":0, \"waitresp_cnt\":0, \"waitresp_msg_cnt\":0, \"tx\":4, \"txbytes\":126, \"txerrs\":0, \"txretries\":0, \"req_timeouts\":0, \"rx\":4, \"rxbytes\":383, \"rxerrs\":0, \"rxcorriderrs\":0, \"rxpartial\":0, \"zbuf_grow\":0, \"buf_grow\":0, \"wakeups\":11, \"int_latency\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":0 }, \"rtt\": { \"min\":706, \"max\":1696, \"avg\":1038, \"sum\":4154, \"cnt\":4 }, \"throttle\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":0 }, \"toppars\":{ } } , \"kafka:9092/1001\": { \"name\":\"kafka:9092/1001\", \"nodeid\":1001, \"state\":\"UP\", \"stateage\":4996697, \"outbuf_cnt\":1, \"outbuf_msg_cnt\":0, \"waitresp_cnt\":1, \"waitresp_msg_cnt\":0, \"tx\":63, \"txbytes\":5241, \"txerrs\":0, \"txretries\":0, \"req_timeouts\":0, \"rx\":62, \"rxbytes\":12289, \"rxerrs\":0, \"rxcorriderrs\":0, \"rxpartial\":0, \"zbuf_grow\":0, \"buf_grow\":0, \"wakeups\":143, \"int_latency\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":0 }, \"rtt\": { \"min\":508, \"max\":104847, \"avg\":82416, \"sum\":5109823, \"cnt\":62 }, \"throttle\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":49 }, \"toppars\":{ \"firebolt-inttest-out-0\": { \"topic\":\"firebolt-inttest-out\", \"partition\":0} } } }, \"topics\":{ \"firebolt-inttest-out\": { \"topic\":\"firebolt-inttest-out\", \"metadata_age\":4992, \"partitions\":{ \"0\": { \"partition\":0, \"leader\":1001, \"desired\":true, \"unknown\":false, \"msgq_cnt\":0, \"msgq_bytes\":0, \"xmit_msgq_cnt\":0, \"xmit_msgq_bytes\":0, \"fetchq_cnt\":0, \"fetchq_size\":0, \"fetch_state\":\"active\", \"query_offset\":0, \"next_offset\":2323, \"app_offset\":2323, \"stored_offset\":2323, \"committed_offset\":-1001, \"committed_offset\":-1001, \"eof_offset\":2323, \"lo_offset\":-1001, \"consumer_lag\":0, \"consumer_lag_stored\":0, \"txmsgs\":0, \"txbytes\":0, \"msgs\": 90, \"rx_ver_drops\": 0 } , \"-1\": { \"partition\":-1, \"leader\":-1, \"desired\":false, \"unknown\":false, \"msgq_cnt\":0, \"msgq_bytes\":0, \"xmit_msgq_cnt\":0, \"xmit_msgq_bytes\":0, \"fetchq_cnt\":0, \"fetchq_size\":0, \"fetch_state\":\"none\", \"query_offset\":0, \"next_offset\":0, \"app_offset\":-1001, \"stored_offset\":-1001, \"committed_offset\":-1001, \"committed_offset\":-1001, \"eof_offset\":-1001, \"lo_offset\":-1001, \"hi_offset\":-1001, \"consumer_lag\":-1, \"consumer_lag_stored\":-1, \"txmsgs\":0, \"txbytes\":0, \"msgs\": 0, \"rx_ver_drops\": 0 } } } } , \"cgrp\": { \"rebalance_age\": 4991, \"rebalance_cnt\": 2, \"assignment_size\": 1 }}"
	partitionStats = metrics.extractPartitionStats(jsonStr, "firebolt-inttest-out")
	assert.NotNil(t, partitionStats)
	assert.Equal(t, 0, len(partitionStats))

	// missing stats field: consumer_lag
	jsonStr = "{ \"name\": \"rdkafka#consumer-5\", \"type\": \"consumer\", \"ts\":1534357925444843, \"time\":1534357925, \"replyq\":0, \"msg_cnt\":0, \"msg_size\":0, \"msg_max\":0, \"msg_size_max\":0, \"simple_cnt\":0, \"metadata_cache_cnt\":1, \"brokers\":{ \"localhost:9092/bootstrap\": { \"name\":\"localhost:9092/bootstrap\", \"nodeid\":-1, \"state\":\"UP\", \"stateage\":4999562, \"outbuf_cnt\":0, \"outbuf_msg_cnt\":0, \"waitresp_cnt\":0, \"waitresp_msg_cnt\":0, \"tx\":4, \"txbytes\":126, \"txerrs\":0, \"txretries\":0, \"req_timeouts\":0, \"rx\":4, \"rxbytes\":383, \"rxerrs\":0, \"rxcorriderrs\":0, \"rxpartial\":0, \"zbuf_grow\":0, \"buf_grow\":0, \"wakeups\":11, \"int_latency\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":0 }, \"rtt\": { \"min\":706, \"max\":1696, \"avg\":1038, \"sum\":4154, \"cnt\":4 }, \"throttle\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":0 }, \"toppars\":{ } } , \"kafka:9092/1001\": { \"name\":\"kafka:9092/1001\", \"nodeid\":1001, \"state\":\"UP\", \"stateage\":4996697, \"outbuf_cnt\":1, \"outbuf_msg_cnt\":0, \"waitresp_cnt\":1, \"waitresp_msg_cnt\":0, \"tx\":63, \"txbytes\":5241, \"txerrs\":0, \"txretries\":0, \"req_timeouts\":0, \"rx\":62, \"rxbytes\":12289, \"rxerrs\":0, \"rxcorriderrs\":0, \"rxpartial\":0, \"zbuf_grow\":0, \"buf_grow\":0, \"wakeups\":143, \"int_latency\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":0 }, \"rtt\": { \"min\":508, \"max\":104847, \"avg\":82416, \"sum\":5109823, \"cnt\":62 }, \"throttle\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":49 }, \"toppars\":{ \"firebolt-inttest-out-0\": { \"topic\":\"firebolt-inttest-out\", \"partition\":0} } } }, \"topics\":{ \"firebolt-inttest-out\": { \"topic\":\"firebolt-inttest-out\", \"metadata_age\":4992, \"partitions\":{ \"0\": { \"partition\":0, \"leader\":1001, \"desired\":true, \"unknown\":false, \"msgq_cnt\":0, \"msgq_bytes\":0, \"xmit_msgq_cnt\":0, \"xmit_msgq_bytes\":0, \"fetchq_cnt\":0, \"fetchq_size\":0, \"fetch_state\":\"active\", \"query_offset\":0, \"next_offset\":2323, \"app_offset\":2323, \"stored_offset\":2323, \"committed_offset\":-1001, \"committed_offset\":-1001, \"eof_offset\":2323, \"lo_offset\":-1001, \"hi_offset\":2323, \"consumer_lag_stored\":0, \"txmsgs\":0, \"txbytes\":0, \"msgs\": 90, \"rx_ver_drops\": 0 } , \"-1\": { \"partition\":-1, \"leader\":-1, \"desired\":false, \"unknown\":false, \"msgq_cnt\":0, \"msgq_bytes\":0, \"xmit_msgq_cnt\":0, \"xmit_msgq_bytes\":0, \"fetchq_cnt\":0, \"fetchq_size\":0, \"fetch_state\":\"none\", \"query_offset\":0, \"next_offset\":0, \"app_offset\":-1001, \"stored_offset\":-1001, \"committed_offset\":-1001, \"committed_offset\":-1001, \"eof_offset\":-1001, \"lo_offset\":-1001, \"hi_offset\":-1001, \"consumer_lag\":-1, \"consumer_lag_stored\":-1, \"txmsgs\":0, \"txbytes\":0, \"msgs\": 0, \"rx_ver_drops\": 0 } } } } , \"cgrp\": { \"rebalance_age\": 4991, \"rebalance_cnt\": 2, \"assignment_size\": 1 }}"
	partitionStats = metrics.extractPartitionStats(jsonStr, "firebolt-inttest-out")
	assert.NotNil(t, partitionStats)
	assert.Equal(t, 0, len(partitionStats))

	// missing stats field: consumer_lag_stored
	jsonStr = "{ \"name\": \"rdkafka#consumer-5\", \"type\": \"consumer\", \"ts\":1534357925444843, \"time\":1534357925, \"replyq\":0, \"msg_cnt\":0, \"msg_size\":0, \"msg_max\":0, \"msg_size_max\":0, \"simple_cnt\":0, \"metadata_cache_cnt\":1, \"brokers\":{ \"localhost:9092/bootstrap\": { \"name\":\"localhost:9092/bootstrap\", \"nodeid\":-1, \"state\":\"UP\", \"stateage\":4999562, \"outbuf_cnt\":0, \"outbuf_msg_cnt\":0, \"waitresp_cnt\":0, \"waitresp_msg_cnt\":0, \"tx\":4, \"txbytes\":126, \"txerrs\":0, \"txretries\":0, \"req_timeouts\":0, \"rx\":4, \"rxbytes\":383, \"rxerrs\":0, \"rxcorriderrs\":0, \"rxpartial\":0, \"zbuf_grow\":0, \"buf_grow\":0, \"wakeups\":11, \"int_latency\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":0 }, \"rtt\": { \"min\":706, \"max\":1696, \"avg\":1038, \"sum\":4154, \"cnt\":4 }, \"throttle\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":0 }, \"toppars\":{ } } , \"kafka:9092/1001\": { \"name\":\"kafka:9092/1001\", \"nodeid\":1001, \"state\":\"UP\", \"stateage\":4996697, \"outbuf_cnt\":1, \"outbuf_msg_cnt\":0, \"waitresp_cnt\":1, \"waitresp_msg_cnt\":0, \"tx\":63, \"txbytes\":5241, \"txerrs\":0, \"txretries\":0, \"req_timeouts\":0, \"rx\":62, \"rxbytes\":12289, \"rxerrs\":0, \"rxcorriderrs\":0, \"rxpartial\":0, \"zbuf_grow\":0, \"buf_grow\":0, \"wakeups\":143, \"int_latency\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":0 }, \"rtt\": { \"min\":508, \"max\":104847, \"avg\":82416, \"sum\":5109823, \"cnt\":62 }, \"throttle\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":49 }, \"toppars\":{ \"firebolt-inttest-out-0\": { \"topic\":\"firebolt-inttest-out\", \"partition\":0} } } }, \"topics\":{ \"firebolt-inttest-out\": { \"topic\":\"firebolt-inttest-out\", \"metadata_age\":4992, \"partitions\":{ \"0\": { \"partition\":0, \"leader\":1001, \"desired\":true, \"unknown\":false, \"msgq_cnt\":0, \"msgq_bytes\":0, \"xmit_msgq_cnt\":0, \"xmit_msgq_bytes\":0, \"fetchq_cnt\":0, \"fetchq_size\":0, \"fetch_state\":\"active\", \"query_offset\":0, \"next_offset\":2323, \"app_offset\":2323, \"stored_offset\":2323, \"committed_offset\":-1001, \"committed_offset\":-1001, \"eof_offset\":2323, \"lo_offset\":-1001, \"hi_offset\":2323, \"consumer_lag\":0, \"txmsgs\":0, \"txbytes\":0, \"msgs\": 90, \"rx_ver_drops\": 0 } , \"-1\": { \"partition\":-1, \"leader\":-1, \"desired\":false, \"unknown\":false, \"msgq_cnt\":0, \"msgq_bytes\":0, \"xmit_msgq_cnt\":0, \"xmit_msgq_bytes\":0, \"fetchq_cnt\":0, \"fetchq_size\":0, \"fetch_state\":\"none\", \"query_offset\":0, \"next_offset\":0, \"app_offset\":-1001, \"stored_offset\":-1001, \"committed_offset\":-1001, \"committed_offset\":-1001, \"eof_offset\":-1001, \"lo_offset\":-1001, \"hi_offset\":-1001, \"consumer_lag\":-1, \"consumer_lag_stored\":-1, \"txmsgs\":0, \"txbytes\":0, \"msgs\": 0, \"rx_ver_drops\": 0 } } } } , \"cgrp\": { \"rebalance_age\": 4991, \"rebalance_cnt\": 2, \"assignment_size\": 1 }}"
	partitionStats = metrics.extractPartitionStats(jsonStr, "firebolt-inttest-out")
	assert.NotNil(t, partitionStats)
	assert.Equal(t, 0, len(partitionStats))
}

func TestRegisterMetrics(t *testing.T) {
	metrics2.Init("consumermetrics_test")
	metrics := &Metrics{}
	metrics.RegisterConsumerMetrics()

	jsonStr := "{ \"name\": \"rdkafka#consumer-5\", \"type\": \"consumer\", \"ts\":1534357925444843, \"time\":1534357925, \"replyq\":0, \"msg_cnt\":0, \"msg_size\":0, \"msg_max\":0, \"msg_size_max\":0, \"simple_cnt\":0, \"metadata_cache_cnt\":1, \"brokers\":{ \"localhost:9092/bootstrap\": { \"name\":\"localhost:9092/bootstrap\", \"nodeid\":-1, \"state\":\"UP\", \"stateage\":4999562, \"outbuf_cnt\":0, \"outbuf_msg_cnt\":0, \"waitresp_cnt\":0, \"waitresp_msg_cnt\":0, \"tx\":4, \"txbytes\":126, \"txerrs\":0, \"txretries\":0, \"req_timeouts\":0, \"rx\":4, \"rxbytes\":383, \"rxerrs\":0, \"rxcorriderrs\":0, \"rxpartial\":0, \"zbuf_grow\":0, \"buf_grow\":0, \"wakeups\":11, \"int_latency\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":0 }, \"rtt\": { \"min\":706, \"max\":1696, \"avg\":1038, \"sum\":4154, \"cnt\":4 }, \"throttle\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":0 }, \"toppars\":{ } } , \"kafka:9092/1001\": { \"name\":\"kafka:9092/1001\", \"nodeid\":1001, \"state\":\"UP\", \"stateage\":4996697, \"outbuf_cnt\":1, \"outbuf_msg_cnt\":0, \"waitresp_cnt\":1, \"waitresp_msg_cnt\":0, \"tx\":63, \"txbytes\":5241, \"txerrs\":0, \"txretries\":0, \"req_timeouts\":0, \"rx\":62, \"rxbytes\":12289, \"rxerrs\":0, \"rxcorriderrs\":0, \"rxpartial\":0, \"zbuf_grow\":0, \"buf_grow\":0, \"wakeups\":143, \"int_latency\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":0 }, \"rtt\": { \"min\":508, \"max\":104847, \"avg\":82416, \"sum\":5109823, \"cnt\":62 }, \"throttle\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":49 }, \"toppars\":{ \"firebolt-inttest-out-0\": { \"topic\":\"firebolt-inttest-out\", \"partition\":0} } } }, \"topics\":{ \"firebolt-inttest-out\": { \"topic\":\"firebolt-inttest-out\", \"metadata_age\":4992, \"partitions\":{ \"0\": { \"partition\":0, \"leader\":1001, \"desired\":true, \"unknown\":false, \"msgq_cnt\":0, \"msgq_bytes\":0, \"xmit_msgq_cnt\":0, \"xmit_msgq_bytes\":0, \"fetchq_cnt\":0, \"fetchq_size\":0, \"fetch_state\":\"active\", \"query_offset\":0, \"next_offset\":2323, \"app_offset\":2323, \"stored_offset\":2323, \"committed_offset\":-1001, \"committed_offset\":-1001, \"eof_offset\":2323, \"lo_offset\":-1001, \"hi_offset\":2323, \"consumer_lag\":0, \"consumer_lag_stored\":0, \"txmsgs\":0, \"txbytes\":0, \"msgs\": 90, \"rx_ver_drops\": 0 } , \"-1\": { \"partition\":-1, \"leader\":-1, \"desired\":false, \"unknown\":false, \"msgq_cnt\":0, \"msgq_bytes\":0, \"xmit_msgq_cnt\":0, \"xmit_msgq_bytes\":0, \"fetchq_cnt\":0, \"fetchq_size\":0, \"fetch_state\":\"none\", \"query_offset\":0, \"next_offset\":0, \"app_offset\":-1001, \"stored_offset\":-1001, \"committed_offset\":-1001, \"committed_offset\":-1001, \"eof_offset\":-1001, \"lo_offset\":-1001, \"hi_offset\":-1001, \"consumer_lag\":-1, \"consumer_lag_stored\":-1, \"txmsgs\":0, \"txbytes\":0, \"msgs\": 0, \"rx_ver_drops\": 0 } } } } , \"cgrp\": { \"rebalance_age\": 4991, \"rebalance_cnt\": 2, \"assignment_size\": 1 }}"
	metrics.UpdateConsumerMetrics(jsonStr, "firebolt-inttest-out")

	// let's just check one value
	val, err := util.GetGaugeVecValue(metrics.HighWatermark, "0")
	//highWatermarkGauge, err := metrics.HighWatermark.GetMetricWithLabelValues("0")
	assert.Nil(t, err)
	assert.Equal(t, 2323.0, val)
	//dtoMetric := &dto.Metric{}
	//highWatermarkGauge.Write(dtoMetric)
	//hwstr := dtoMetric.String()
	//assert.Equal(t, "label:<name:\"partition_id\" value:\"0\" > gauge:<value:2323 > ", hwstr)
}

func TestExtractStats_IgnoreInactiveFetchStatus(t *testing.T) {
	metrics2.Init("consumermetrics_test")
	metrics := &Metrics{}
	metrics.RegisterConsumerMetrics()
	// partition 0 has fetch_state=stopped, partition 1 has fetch_state=active
	jsonStr := "{ \"name\": \"rdkafka#consumer-5\", \"type\": \"consumer\", \"ts\":1534357925444843, \"time\":1534357925, \"replyq\":0, \"msg_cnt\":0, \"msg_size\":0, \"msg_max\":0, \"msg_size_max\":0, \"simple_cnt\":0, \"metadata_cache_cnt\":1, \"brokers\":{ \"localhost:9092/bootstrap\": { \"name\":\"localhost:9092/bootstrap\", \"nodeid\":-1, \"state\":\"UP\", \"stateage\":4999562, \"outbuf_cnt\":0, \"outbuf_msg_cnt\":0, \"waitresp_cnt\":0, \"waitresp_msg_cnt\":0, \"tx\":4, \"txbytes\":126, \"txerrs\":0, \"txretries\":0, \"req_timeouts\":0, \"rx\":4, \"rxbytes\":383, \"rxerrs\":0, \"rxcorriderrs\":0, \"rxpartial\":0, \"zbuf_grow\":0, \"buf_grow\":0, \"wakeups\":11, \"int_latency\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":0 }, \"rtt\": { \"min\":706, \"max\":1696, \"avg\":1038, \"sum\":4154, \"cnt\":4 }, \"throttle\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":0 }, \"toppars\":{ } } , \"kafka:9092/1001\": { \"name\":\"kafka:9092/1001\", \"nodeid\":1001, \"state\":\"UP\", \"stateage\":4996697, \"outbuf_cnt\":1, \"outbuf_msg_cnt\":0, \"waitresp_cnt\":1, \"waitresp_msg_cnt\":0, \"tx\":63, \"txbytes\":5241, \"txerrs\":0, \"txretries\":0, \"req_timeouts\":0, \"rx\":62, \"rxbytes\":12289, \"rxerrs\":0, \"rxcorriderrs\":0, \"rxpartial\":0, \"zbuf_grow\":0, \"buf_grow\":0, \"wakeups\":143, \"int_latency\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":0 }, \"rtt\": { \"min\":508, \"max\":104847, \"avg\":82416, \"sum\":5109823, \"cnt\":62 }, \"throttle\": { \"min\":0, \"max\":0, \"avg\":0, \"sum\":0, \"cnt\":49 }, \"toppars\":{ \"firebolt-inttest-out-0\": { \"topic\":\"firebolt-inttest-out\", \"partition\":0} } } }, \"topics\":{ \"firebolt-inttest-out\": { \"topic\":\"firebolt-inttest-out\", \"metadata_age\":4992, \"partitions\":{ \"0\": { \"partition\":0, \"leader\":1001, \"desired\":true, \"unknown\":false, \"msgq_cnt\":0, \"msgq_bytes\":0, \"xmit_msgq_cnt\":0, \"xmit_msgq_bytes\":0, \"fetchq_cnt\":0, \"fetchq_size\":0, \"fetch_state\":\"stopped\", \"query_offset\":0, \"next_offset\":2323, \"app_offset\":2323, \"stored_offset\":2323, \"committed_offset\":-1001, \"committed_offset\":-1001, \"eof_offset\":2323, \"lo_offset\":-1001, \"hi_offset\":2323, \"consumer_lag\":0, \"consumer_lag_stored\":0, \"txmsgs\":0, \"txbytes\":0, \"msgs\": 90, \"rx_ver_drops\": 0 }, \"1\": { \"partition\":1, \"leader\":1001, \"desired\":true, \"unknown\":false, \"msgq_cnt\":0, \"msgq_bytes\":0, \"xmit_msgq_cnt\":0, \"xmit_msgq_bytes\":0, \"fetchq_cnt\":0, \"fetchq_size\":0, \"fetch_state\":\"active\", \"query_offset\":0, \"next_offset\":2323, \"app_offset\":2323, \"stored_offset\":2323, \"committed_offset\":-1001, \"committed_offset\":-1001, \"eof_offset\":2323, \"lo_offset\":-1001, \"hi_offset\":2323, \"consumer_lag\":123456, \"consumer_lag_stored\":123456, \"txmsgs\":0, \"txbytes\":0, \"msgs\": 90, \"rx_ver_drops\": 0 } , \"-1\": { \"partition\":-1, \"leader\":-1, \"desired\":false, \"unknown\":false, \"msgq_cnt\":0, \"msgq_bytes\":0, \"xmit_msgq_cnt\":0, \"xmit_msgq_bytes\":0, \"fetchq_cnt\":0, \"fetchq_size\":0, \"fetch_state\":\"none\", \"query_offset\":0, \"next_offset\":0, \"app_offset\":-1001, \"stored_offset\":-1001, \"committed_offset\":-1001, \"committed_offset\":-1001, \"eof_offset\":-1001, \"lo_offset\":-1001, \"hi_offset\":-1001, \"consumer_lag\":-1, \"consumer_lag_stored\":-1, \"txmsgs\":0, \"txbytes\":0, \"msgs\": 0, \"rx_ver_drops\": 0 } } } } , \"cgrp\": { \"rebalance_age\": 4991, \"rebalance_cnt\": 2, \"assignment_size\": 1 }}"
	stats := metrics.extractPartitionStats(jsonStr, "firebolt-inttest-out")
	assert.NotNil(t, stats)
	assert.Equal(t, 2, len(stats))

	// results are not guaranteed to come in partitionID order so loop through 'em
	for _, partition := range stats {
		if partition.id == 0 {
			assert.Equal(t, float64(-1), partition.consumerLag)
			assert.Equal(t, float64(-1), partition.consumerLagStored)
		}
		if partition.id == 1 {
			assert.Equal(t, float64(123456), partition.consumerLag)
			assert.Equal(t, float64(123456), partition.consumerLagStored)
		}
	}
}
